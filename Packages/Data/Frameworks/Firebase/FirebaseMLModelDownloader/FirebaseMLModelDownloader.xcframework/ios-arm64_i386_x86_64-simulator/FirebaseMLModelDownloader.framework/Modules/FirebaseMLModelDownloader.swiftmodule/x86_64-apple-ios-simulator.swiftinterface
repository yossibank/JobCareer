// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FirebaseMLModelDownloader
import FirebaseCore
import FirebaseInstallations
@_exported import FirebaseMLModelDownloader
import Foundation
import GoogleDataTransport
import GoogleUtilities
import Swift
import SwiftProtobuf
public struct CustomModel : Swift.Hashable {
  public let name: Swift.String
  public let size: Swift.Int
  public let path: Swift.String
  public let hash: Swift.String
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FirebaseMLModelDownloader.CustomModel, b: FirebaseMLModelDownloader.CustomModel) -> Swift.Bool
}
public struct ModelDownloadConditions {
  public init(allowsCellularAccess: Swift.Bool = true)
}
public enum ModelDownloadType {
  case localModel
  case localModelUpdateInBackground
  case latestModel
  public static func == (a: FirebaseMLModelDownloader.ModelDownloadType, b: FirebaseMLModelDownloader.ModelDownloadType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class ModelDownloader {
  public static func modelDownloader() -> FirebaseMLModelDownloader.ModelDownloader
  public static func modelDownloader(app: FirebaseCore.FirebaseApp) -> FirebaseMLModelDownloader.ModelDownloader
  public func getModel(name modelName: Swift.String, downloadType: FirebaseMLModelDownloader.ModelDownloadType, conditions: FirebaseMLModelDownloader.ModelDownloadConditions, progressHandler: ((Swift.Float) -> Swift.Void)? = nil, completion: @escaping (Swift.Result<FirebaseMLModelDownloader.CustomModel, FirebaseMLModelDownloader.DownloadError>) -> Swift.Void)
  public func listDownloadedModels(completion: @escaping (Swift.Result<Swift.Set<FirebaseMLModelDownloader.CustomModel>, FirebaseMLModelDownloader.DownloadedModelError>) -> Swift.Void)
  public func deleteDownloadedModel(name modelName: Swift.String, completion: @escaping (Swift.Result<Swift.Void, FirebaseMLModelDownloader.DownloadedModelError>) -> Swift.Void)
  @objc deinit
}
public enum DownloadError : Swift.Error, Swift.Equatable {
  case notFound
  case permissionDenied
  case failedPrecondition
  case resourceExhausted
  case notEnoughSpace
  case invalidArgument
  case emptyModelName
  case internalError(description: Swift.String)
  public static func == (a: FirebaseMLModelDownloader.DownloadError, b: FirebaseMLModelDownloader.DownloadError) -> Swift.Bool
}
public enum DownloadedModelError : Swift.Error {
  case notFound
  case fileIOError(description: Swift.String)
  case internalError(description: Swift.String)
}
extension FirebaseMLModelDownloader.ModelDownloadType : Swift.Equatable {}
extension FirebaseMLModelDownloader.ModelDownloadType : Swift.Hashable {}
